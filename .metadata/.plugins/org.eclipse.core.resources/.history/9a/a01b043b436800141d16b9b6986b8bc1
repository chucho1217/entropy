package entropy;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;

import javax.xml.crypto.Data;

public class Entropy_Main {
	
	///Users/carlosgarzon/Desktop/recitation/calgary/bib
	
	public static void main( String [] args )
	{
		File file = new File("/Users/carlosgarzon/Desktop/recitation/calgary/book2");
		
		try {
			byte[] b = getBytesFromFile( file );
			for(int i = 0; i < b.length; i++)
			{
				System.out.println((char) b[i] );
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

   public static byte[] getBytesFromFile(File file) throws IOException 
   {
        InputStream is = new FileInputStream(file);
    
		// Get the size of the file
        long length = file.length();
    
        if (length > Integer.MAX_VALUE) {
            // File is too large
        }
    
        // Create the byte array to hold the data
        byte[] bytes = new byte[(int)length];
    
        // Read in the bytes
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }
    
        // Ensure all the bytes have been read in
        if (offset < bytes.length) {
            throw new IOException("Could not completely read file "+file.getName());
        }
    
        // Close the input stream and return bytes
        is.close();
        return bytes;
    }

}
