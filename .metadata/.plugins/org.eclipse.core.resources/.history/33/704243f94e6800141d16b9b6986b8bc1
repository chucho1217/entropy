package entropy;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;

import javax.xml.crypto.Data;



public class Entropy_Main {
	
	///Users/carlosgarzon/Desktop/recitation/calgary/bib
	
	public static void main( String [] args )
	{
		File file = new File("/Users/carlosgarzon/Desktop/recitation/calgary/book2");
		
		try {
			byte[] b = getBytesFromFile( file );

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

	}

   public static byte[] getBytesFromFile(File file) throws IOException 
   {
        InputStream is = new FileInputStream(file);
    
		// Get the size of the file
        long length = file.length();
    
        if (length > Integer.MAX_VALUE) {
            // File is too large
        }
    
        // Create the byte array to hold the data
        byte[] bytes = new byte[(int)length];
    
        // Read in the bytes
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }
    
        // Ensure all the bytes have been read in
        if (offset < bytes.length) {
            throw new IOException("Could not completely read file "+file.getName());
        }
    
        // Close the input stream and return bytes
        is.close();
        return bytes;
    }
   
   public static double log2( double value )
   {
	   return Math.log( value ) / Math.log( 2.0 ) ;
   }
   
   public static int CalcFreq( byte[] pBuffer, int *FreqArray, int length )
   {
     
     int CharArray[256];	//The amount of ascii characters
     int nCount;
     int nArraylen = 0;
     for( nCount =0; nCount < 256; nCount++ )
     {
       CharArray[nCount]=-1;
     }

     //Iterates through every character in the char array
     for( nCount = 0; nCount < length; nCount++ )
     {
     	//if possition has not been initialized
       if( CharArray[(int)pBuffer[nCount]] == -1)
       {
         //Each ascii character is represented by a possition int the array
         //the ascii character possition is getting current array length
         CharArray[(int)pBuffer[nCount]]= nArraylen;
         nArraylen++;
       }
       //The amount of times that perticular character is found increases
       FreqArray[CharArray[(int)pBuffer[nCount]]]++;
     }
     return nArraylen;
   }
}
